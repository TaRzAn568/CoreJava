/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	 public static void main (String[] args)throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());
        while(t-- >0){
            String s = br.readLine();
            System.out.println(getSmallestDistinctSubString(s,s.length()));
            //System.out.println(findSubString(s));

        }
    }
    public static int getSmallestDistinctSubString(String s, int n){
        Set<Character> set = new HashSet<>();
        for(int i=0; i <n;i++){
            set.add(s.charAt(i));
        }
        int distinctLen = set.size();
        int l=0, r=0, bestL=0, bestR=Integer.MAX_VALUE, c=0;
        Map<Character,Integer> map = new HashMap<>();
        for(int i=0; i<n; i++){
            char iChar = s.charAt(i);
            if(map.getOrDefault(iChar,0) == 0){
                c++;
            }
            map.put(iChar,map.getOrDefault(iChar,0)+1);
            if(c == distinctLen){
                r = i;
                int j = 0;
                for(j=l; j<r; j++){
                    char jChar = s.charAt(j);
                    if(map.get(jChar) < 2){
                        break;
                    }
                    map.put(jChar,map.getOrDefault(jChar,0)-1);
                }
                l = j;
                if(bestR - bestL > r -l){
                    bestR = r; 
                    bestL = l;
                }
                map.put(s.charAt(l),map.getOrDefault(s.charAt(l),0)-1);
                l++;
                c--;
            }
        }
     return bestR-bestL+1;
    }
    
    /*static final int MAX_CHARS = 256; 
  
    // Function to find smallest window containing 
    // all distinct characters 
    static int findSubString(String str) 
    { 
        int n = str.length(); 
  
        // Count all distinct characters. 
        int dist_count = 0; 
  
        boolean[] visited = new boolean[MAX_CHARS]; 
        Arrays.fill(visited, false); 
        for (int i = 0; i < n; i++) { 
            if (visited[str.charAt(i)] == false) { 
                visited[str.charAt(i)] = true; 
                dist_count++; 
            } 
        } 
  
        // Now follow the algorithm discussed in below 
        // post. We basically maintain a window of characters 
        // that contains all characters of given string. 
        int start = 0, start_index = -1; 
        int min_len = Integer.MAX_VALUE; 
  
        int count = 0; 
        int[] curr_count = new int[MAX_CHARS]; 
        for (int j = 0; j < n; j++) { 
            // Count occurrence of characters of string 
            curr_count[str.charAt(j)]++; 
  
            // If any distinct character matched, 
            // then increment count 
            if (curr_count[str.charAt(j)] == 1) 
                count++; 
  
            // if all the characters are matched 
            if (count == dist_count) { 
                // Try to minimize the window i.e., check if 
                // any character is occurring more no. of times 
                // than its occurrence in pattern, if yes 
                // then remove it from starting and also remove 
                // the useless characters. 
                while (curr_count[str.charAt(start)] > 1) { 
                    if (curr_count[str.charAt(start)] > 1) 
                        curr_count[str.charAt(start)]--; 
                    start++; 
                } 
  
                // Update window size 
                int len_window = j - start + 1; 
                if (min_len > len_window) { 
                    min_len = len_window; 
                    start_index = start; 
                } 
            } 
        } 
        // Return substring starting from start_index 
        // and length min_len 
        System.out.println(str.substring(start_index,start_index+min_len));
        return (min_len); 
    } */
}
